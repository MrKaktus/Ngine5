/*

 Ngine v5.0
 
 Module      : Effect 
 Requirements: none
 Description : Helper class combining different shader
               stages into complete pipeline program.

*/

#ifndef ENG_RESOURCES_EFFECT
#define ENG_RESOURCES_EFFECT

#include "core/rendering/program.h"

#include <map>
#include <vector>
using namespace std;

using namespace en::gpu;

namespace en
{
   enum ShadingLanguage
        {
        eGLSL_1_10 = 0,
        eGLSL_1_20    ,
        eGLSL_1_30    ,
        eGLSL_1_40    ,
        eGLSL_1_50    ,
        eGLSL_3_30    ,
        eGLSL_4_00    ,
        eGLSL_4_10    ,
        eGLSL_4_20    ,
        eGLSL_4_30    ,
        eGLSL_4_40    ,
        eGLSL_4_50    ,
        eESSL_1_00    ,
        eESSL_3_00    ,
        ShadingLanguageVersionsCount
        };

   // Parameters common for whole scene/frame
   struct SceneParameters
      {
      float4x4 camViewProjection;
      float4x4 camProjection;
      float4x4 camView;
      };

   class Effect
         {
         private:
         string         shader[PipelineStagesCount]; // Shaders code for each stage
         vector<string> code[PipelineStagesCount];   // Preprocessor code autogenerated for each stage
         Program        binary;                      // Compiled and linked pipeline
         bool           dirty;                       // Do we need to recompile?
   
         public:
			 Effect(ShadingLanguage version, string name, bool includeConstants = true);
        ~Effect();
   
         void attach(PipelineStage stage, string code); // Add code to given shader stage
         void clear(PipelineStage stage);               // Clear all additional code for given shader stage
         void clear(void);                            // Clear all additional code
         Program program(void);              // Return current program  
         };

}
#endif