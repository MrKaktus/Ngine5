


// Unify rendering of objects:
//
// Describe binding and batching of mesh-material packets
//

// Mesh binding:
//
// VBO 0 - Position, UV0   ( for shadow map generation, also for transparent objects casting shadows )
// VBO 1 - Normal, Tangent
// VBO 2 - Skin Indices, Skin Weights 
// VBO 3 - Decals UV1

// Buffer - Per-Frame constants - lights? materials ?
// Buffer - Per-Draw constants
// Buffer - Per-Object constants, array of structures
// Texture array - materials cache



// Shader:

//   Shader header generated by engine:
//   ----------------------------------
//
//   #version 430 core
//   
//   // Variables constant through whole frame
//   buffer enFrame
//          {
//          struct enEyeData
//                 {
//                 mat4 enModelViewProjection;  // premultiplied, most commonly used
//                 mat4 enViewProjection;       // premultiplied
//                 mat4 enProjection;
//                 mat4 enModelView;            // premultiplied
//                 mat4 enModel;
//                 mat4 enView;
//                 } eye[2];
//          };
//
//   // Variables constant through draw call
//   buffer enDraw
//          {
//          }
//
//   // Variables constant per instance
//   buffer enInstance
//          {
//          struct enInstanceData
//                 {
//   
//                 // ... instance specific data block of size == sizeof(enInstanceData) ...
//                 //     each instance has exactly the same copy of this structure on CPU side 
//                 //     that data are copied to some random Index in the array before batch draw
//                 } data[];
//          };
//   
//   // Variables per vertex, primitive
//   in vec3  inPosition;
//   in vec2  inTexCoords;
//   in vec3  inNormal;
//   in vec3  inTangent;
//   in uint4 inBoneIndex;
//   in vec4  inBoneWeight;
//   in vec2  inDecalCoords;
//   in vec3  inColor;
//
//
//   Shader code written by programmer, or generated from effect/material editor:
//   ----------------------------------------------------------------------------
//
//   main()
//   {
//   eye[gl_LayerID].enModelViewProjection    <- accessing variables differing per eye in stereoscopic mode
//   data[gl_InstanceID]. ....  <- accessing each shader instance specific parameter
//   }